name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'     
        required: true
        type: string
      tag:
        description: 'Git Tag to checkout'
        required: true
        type: string

jobs:
  release:
    runs-on: macOS-15
    steps:

      # Checkout libXray
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Обеспечить полный клон репозитория
          repository: 'XTLS/libXray'
          path: 'xray'
          ref: ${{ github.event.inputs.tag }}

      # Clone Xray-Core
      - name: Clone Xray-Core
        run: |
          git clone https://github.com/XTLS/Xray-core.git xray/Xray-core

      # Fix Xray-Core path
      - name: Adjust Xray-Core Path
        run: |
          ln -s "$(pwd)/xray/Xray-core" "$(pwd)/xray/../Xray-core"

      # Debug directory structure
      - name: Debug Directory
        run: |
          echo "Current Directory: $(pwd)"
          echo "Root Directory Contents:"
          ls -la
          echo "xray Directory Contents:"
          ls -la xray
          echo "Xray-core Directory via SymLink:"
          ls -la xray/Xray-core

      # Setup Go environment
      - name: Setup Go
        uses: actions/setup-go@v3.5.0
        with:
          go-version: '1.22.4'

      # Prepare Go modules
      - name: Prepare GO
        run: |
          cd xray
          rm -f go.mod go.sum
          go mod init github.com/xtls/libxray
          go mod tidy

      # Build xcframework
      #- name: Build xcframework
      #  run: |
      #    cd xray
      #    python3 build/main.py apple gomobile
      #    zip -ry ./LibXray.xcframework.zip ./LibXray.xcframework

      #- name: Detect checksum
      #  run: |
      #    export TEMP=`shasum -a 256 xray/LibXray.xcframework.zip`
      #    export CHECKSUM=${TEMP:0:64}
      #    echo "FILE_CHECKSUM=${CHECKSUM}" >> $GITHUB_ENV
      #    unset CHECKSUM
      #    unset TEMP

      # Update package file in xray directory
      - name: Update package file
        run: |
          cd xray
          echo "// swift-tools-version: 5.7" > Package.swift
          echo "" >> Package.swift
          echo "import PackageDescription" >> Package.swift
          echo "" >> Package.swift
          echo "let package = Package(" >> Package.swift
          echo "  name: \"LibXray\"," >> Package.swift
          echo "  platforms: [.iOS(.v15)]," >> Package.swift
          echo "  products: [" >> Package.swift
          echo "    .library(name: \"LibXray\", targets: [\"LibXray\"])" >> Package.swift
          echo "  ]," >> Package.swift
          echo "  targets: [" >> Package.swift
          echo "    .binaryTarget(" >> Package.swift
          echo "      name: \"LibXray\"," >> Package.swift
          echo "      url: \"https://github.com/tozik/LibXray/releases/download/${{ github.event.inputs.version }}/LibXray.xcframework.zip\"," >> Package.swift
          echo "      checksum: \"${{ env.FILE_CHECKSUM }}\"" >> Package.swift
          echo "    )" >> Package.swift
          echo "  ]" >> Package.swift
          echo ")" >> Package.swift
          echo "---------------------------"
          ls -LR
          
      # Пушим артефакт и Package.swift
      - name: Commit Package.swift
        run: |
          # Выводим список файлов в текущем каталоге и проверяем артефакт
          ls -l ./HevSocks5Tunnel.xcframework.zip
          shasum -a 256 ./HevSocks5Tunnel.xcframework.zip
          
          # Добавляем только Package.swift в git
          git add Package.swift
          
          # Выполняем commit с тегом версии
          git commit -m "Update Package.swift for version ${{ github.event.inputs.version }}"
          
          # Пушим изменения в текущий репозиторий
          git push
      # Commit the changes in xray directory
      #- name: Commit Package.swift
      #  uses: stefanzweifel/git-auto-commit-action@v4
      #  with:
      #    repository: './xray'  # Указываем путь до репозитория
      #    commit_message: LibXray Release ${{ github.event.inputs.version }}
      #    commit_user_name: tozik
      #    commit_user_email: tozika@inbox.ru
      #    tagging_message: ${{ github.event.inputs.version }}
      #    file_pattern: 'Package.swift'

      # Загрузим релизный артефакт в публичный репозиторий
      #- name: Upload release asset to repo
      #  uses: softprops/action-gh-release@v1
      #  with:
      #    draft: false
      #    tag_name: ${{ github.event.inputs.version }}
      #    body: 'Release built from source'
      #    files: xray/LibXray.xcframework.zip
      #    repository: 'tozik/LibXray'
      #    token: ${{ secrets.SECOND_REPO_TOKEN }}
