name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'     
        required: true
        type: string

jobs:
  release:
    runs-on: macOS-latest  # Используем последнюю версию macOS
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Checkout libXray
        uses: actions/checkout@v3
        with:
          repository: 'tozik/libXray'
          path: 'xray'

      - name: Clone Xray-Core
        run: |
          git clone https://github.com/XTLS/Xray-core.git xray/Xray-core
          ln -s "$(pwd)/xray/Xray-core" "$(pwd)/xray/../Xray-core"

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21'  # Используем проверенную версию
          cache: true

      - name: Install Gomobile with dependencies
        run: |
          # Устанавливаем полный набор зависимостей
          go install golang.org/x/mobile/cmd/gomobile@latest
          go install golang.org/x/mobile/cmd/gobind@latest
          gomobile init -v
          
          # Явно добавляем в PATH
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
          echo "PATH: $PATH" >> $GITHUB_ENV

      - name: Verify tools
        run: |
          which gomobile
          which gobind
          gomobile version

      - name: Prepare Go modules
        run: |
          cd xray
          go mod download
          go mod tidy

      - name: Obfuscate source code
        run: |
          cd xray/Xray-core
          
          # 1. Создаём мусорный файл (если нужно)
          JUNK_CODE=$(openssl rand -hex 20)
          echo "package main; func _junk_$JUNK_CODE() {}" > junk.go
          
          # 2. Находим ЛЮБОЙ .go-файл для модификации (пример для main.go)
          TARGET_FILE=$(find . -name "*.go" -type f | head -n 1)
          
          if [ -z "$TARGET_FILE" ]; then
            echo "Error: No .go files found in Xray-core directory!"
            exit 1
          fi
          
          echo "Modifying file: $TARGET_FILE"
          
          # 3. Добавляем случайный комментарий в начало файла (macOS-совместимый sed)
          RAND_STR=$(openssl rand -hex 8)
          sed -i '' "1i\\
          // $RAND_STR\\
          " "$TARGET_FILE"
          
          # 4. Проверяем изменения
          echo "=== First 3 lines of modified file ==="
          head -n 3 "$TARGET_FILE"
      
      - name: Build xcframework
        run: |
          cd xray
          export PATH="$(go env GOPATH)/bin:$PATH"
          gomobile bind -v \
            -target=ios,macos \
            -o LibXray.xcframework \
            -ldflags="-X main.buildID=$(date +%s)" \
            ./

      - name: Package xcframework
        run: |
          cd xray
          zip -r LibXray.xcframework.zip LibXray.xcframework
      # ... остальные шаги (Generate Package.swift и т.д.)
          
      - name: Generate Package.swift
        run: |
          export CHECKSUM=$(shasum -a 256 xray/LibXray.xcframework.zip | awk '{print $1}')
          echo "// swift-tools-version: 5.7" > Package.swift
          echo "" >> Package.swift
          echo "import PackageDescription" >> Package.swift
          echo "" >> Package.swift
          echo "let package = Package(" >> Package.swift
          echo "  name: \"LibXray\"," >> Package.swift
          echo "  platforms: [.iOS(.v15), .macOS(.v13)]," >> Package.swift
          echo "  products: [" >> Package.swift
          echo "    .library(name: \"LibXray\", targets: [\"LibXray\"])" >> Package.swift
          echo "  ]," >> Package.swift
          echo "  targets: [" >> Package.swift
          echo "    .binaryTarget(" >> Package.swift
          echo "      name: \"LibXray\"," >> Package.swift
          echo "      url: \"https://github.com/tozik/BuildLibXray/releases/download/${{ github.event.inputs.version }}/LibXray.xcframework.zip\"," >> Package.swift
          echo "      checksum: \"$CHECKSUM\"" >> Package.swift
          echo "    )" >> Package.swift
          echo "  ]" >> Package.swift
          echo ")" >> Package.swift
          
      # Пушим артефакт и Package.swift
      - name: Commit Package.swift
        run: |
          # Выводим список файлов в текущем каталоге и проверяем артефакт
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Package.swift
          git commit -m "Update Package.swift for version ${{ github.event.inputs.version }}"
          git push origin HEAD
          
      # Загрузим релизный артефакт в публичный репозиторий
      - name: Upload release asset to second repo
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          tag_name: ${{ github.event.inputs.version }}
          body: 'Release built from source'
          files: xray/LibXray.xcframework.zip
          repository: 'tozik/BuildLibXray'
          token: ${{ secrets.SECOND_REPO_TOKEN }}
