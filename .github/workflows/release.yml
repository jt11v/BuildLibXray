name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.24.2'

      - name: Install dependencies
        run: |
          go install mvdan.cc/garble@latest
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init

      - name: Build with obfuscation
        run: |
          export PATH="$(go env GOPATH)/bin:$PATH"
          export GARBLE_SEED="$(head -c 16 /dev/urandom | base64)"
          
          # Собираем основной код с обфускацией
          garble -seed="$GARBLE_SEED" build -o ./libxray.a ./main.go
          
          # Собираем XCFramework через обфусцированный код
          python3 build/main.py apple gomobile --obfuscate

      - name: Package artifacts
        run: |
          zip -r LibXray.xcframework.zip LibXray.xcframework
          
      # - name: Generate Package.swift
      #   run: |
      #     export CHECKSUM=$(shasum -a 256 xray/LibXray.xcframework.zip | awk '{print $1}')
      #     echo "// swift-tools-version: 5.7" > Package.swift
      #     echo "" >> Package.swift
      #     echo "import PackageDescription" >> Package.swift
      #     echo "" >> Package.swift
      #     echo "let package = Package(" >> Package.swift
      #     echo "  name: \"LibXray\"," >> Package.swift
      #     echo "  platforms: [.iOS(.v15), .macOS(.v13)]," >> Package.swift
      #     echo "  products: [" >> Package.swift
      #     echo "    .library(name: \"LibXray\", targets: [\"LibXray\"])" >> Package.swift
      #     echo "  ]," >> Package.swift
      #     echo "  targets: [" >> Package.swift
      #     echo "    .binaryTarget(" >> Package.swift
      #     echo "      name: \"LibXray\"," >> Package.swift
      #     echo "      url: \"https://github.com/tozik/BuildLibXray/releases/download/${{ github.event.inputs.version }}/LibXray.xcframework.zip\"," >> Package.swift
      #     echo "      checksum: \"$CHECKSUM\"" >> Package.swift
      #     echo "    )" >> Package.swift
      #     echo "  ]" >> Package.swift
      #     echo ")" >> Package.swift
          
      # # Пушим артефакт и Package.swift
      # - name: Commit Package.swift
      #   run: |
      #     # Выводим список файлов в текущем каталоге и проверяем артефакт
      #     git config user.name "GitHub Actions"
      #     git config user.email "actions@github.com"
      #     git add Package.swift
      #     git commit -m "Update Package.swift for version ${{ github.event.inputs.version }}"
      #     git push origin HEAD
          
      # # Загрузим релизный артефакт в публичный репозиторий
      # - name: Upload release asset to second repo
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     draft: false
      #     tag_name: ${{ github.event.inputs.version }}
      #     body: 'Release built from source'
      #     files: xray/LibXray.xcframework.zip
      #     repository: 'tozik/BuildLibXray'
      #     token: ${{ secrets.SECOND_REPO_TOKEN }}
